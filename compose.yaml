version: "3.9"

# -------------------------------------
# Multi-Service Application Setup
# -------------------------------------
# Includes:
#  - Express Server (Node.js)
#  - MongoDB (Database)
#  - Kafka + Zookeeper (Messaging)
#  - Persistent Volumes
# -------------------------------------

services:
  # --------------------------
  # Express Server
  # --------------------------
  server:
    build:
      context: .  # Build context (where Dockerfile is)
    container_name: express-server
    environment:
      NODE_ENV: production
      PORT: 4001
      DATABASE_URL: mongodb://mongo:27017/mydatabase
      KAFKA_BROKER: kafka:9092
    ports:
      - "4001:4001"
    depends_on:
      - mongo
      - kafka
    restart: unless-stopped
    networks:
      - app-network

  # --------------------------
  # MongoDB
  # --------------------------
  mongo:
    image: mongo:latest
    container_name: mongo
    volumes:
      - mongo-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - "27017:27017"
    restart: unless-stopped
    networks:
      - app-network

  # --------------------------
  # Zookeeper
  # --------------------------
  zookeeper:
    image: bitnami/zookeeper:3.9.2-debian-12-r4
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    restart: unless-stopped
    networks:
      - app-network

  # --------------------------
  # Kafka
  # --------------------------
  kafka:
    image: bitnami/kafka:3.7.0-debian-12-r2
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    restart: unless-stopped
    networks:
      - app-network

# --------------------------
# Volumes
# --------------------------
volumes:
  mongo-data:

# --------------------------
# Networks
# --------------------------
networks:
  app-network:
    driver: bridge
